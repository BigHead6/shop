<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nyist.dao.CollectMapper">
  <resultMap id="BaseResultMap" type="com.nyist.entity.Collect">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="cust_id" jdbcType="INTEGER" property="custId" />
    <result column="prod_id" jdbcType="INTEGER" property="prodId" />
    <result column="flag" jdbcType="VARCHAR" property="flag" />
    <result column="extend2" jdbcType="VARCHAR" property="extend2" />
    <result column="extend3" jdbcType="VARCHAR" property="extend3" />
  </resultMap>
  <sql id="Base_Column_List">
    id, cust_id, prod_id, flag, extend2, extend3
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from collect
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from collect
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.nyist.entity.Collect">
    insert into collect (id, cust_id, prod_id, 
      flag, extend2, extend3
      )
    values (#{id,jdbcType=INTEGER}, #{custId,jdbcType=INTEGER}, #{prodId,jdbcType=INTEGER}, 
      #{flag,jdbcType=VARCHAR}, #{extend2,jdbcType=VARCHAR}, #{extend3,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.nyist.entity.Collect">
    insert into collect
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="custId != null">
        cust_id,
      </if>
      <if test="prodId != null">
        prod_id,
      </if>
      <if test="flag != null">
        flag,
      </if>
      <if test="extend2 != null">
        extend2,
      </if>
      <if test="extend3 != null">
        extend3,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="custId != null">
        #{custId,jdbcType=INTEGER},
      </if>
      <if test="prodId != null">
        #{prodId,jdbcType=INTEGER},
      </if>
      <if test="flag != null">
        #{flag,jdbcType=VARCHAR},
      </if>
      <if test="extend2 != null">
        #{extend2,jdbcType=VARCHAR},
      </if>
      <if test="extend3 != null">
        #{extend3,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.nyist.entity.Collect">
    update collect
    <set>
      <if test="custId != null">
        cust_id = #{custId,jdbcType=INTEGER},
      </if>
      <if test="prodId != null">
        prod_id = #{prodId,jdbcType=INTEGER},
      </if>
      <if test="flag != null">
        flag = 0,
      </if>
      <if test="extend2 != null">
        extend2 = #{extend2,jdbcType=VARCHAR},
      </if>
      <if test="extend3 != null">
        extend3 = #{extend3,jdbcType=VARCHAR},
      </if>
    </set>
    where cust_id = #{custId,jdbcType=INTEGER}
    and   prod_id = #{prodId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nyist.entity.Collect">
    update collect
    set cust_id = #{custId,jdbcType=INTEGER},
      prod_id = #{prodId,jdbcType=INTEGER},
      flag = #{flag,jdbcType=VARCHAR},
      extend2 = #{extend2,jdbcType=VARCHAR},
      extend3 = #{extend3,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findAll" parameterType="java.lang.Integer" resultMap="BaseResultMap">    select
    <include refid="Base_Column_List" />
    from collect
    where cust_id = #{custId,jdbcType=INTEGER}
    and flag=1
  </select>


  <select id="selectByCollect" parameterType="com.nyist.entity.Collect" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from collect
    where  cust_id = #{custId,jdbcType=INTEGER}
    and  prod_id = #{prodId,jdbcType=INTEGER} and flag=1
  </select>
</mapper>